// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package db

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBClient creates a new instance of MockDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBClient {
	mock := &MockDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBClient is an autogenerated mock type for the DBClient type
type MockDBClient struct {
	mock.Mock
}

type MockDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBClient) EXPECT() *MockDBClient_Expecter {
	return &MockDBClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Close() {
	_mock.Called()
	return
}

// MockDBClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDBClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDBClient_Expecter) Close() *MockDBClient_Close_Call {
	return &MockDBClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDBClient_Close_Call) Run(run func()) *MockDBClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBClient_Close_Call) Return() *MockDBClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBClient_Close_Call) RunAndReturn(run func()) *MockDBClient_Close_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Get(key string) (*Item, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Item, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Item); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDBClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockDBClient_Expecter) Get(key interface{}) *MockDBClient_Get_Call {
	return &MockDBClient_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockDBClient_Get_Call) Run(run func(key string)) *MockDBClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBClient_Get_Call) Return(item *Item, err error) *MockDBClient_Get_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockDBClient_Get_Call) RunAndReturn(run func(key string) (*Item, error)) *MockDBClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Pop(key string) (*Item, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 *Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Item, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Item); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockDBClient_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - key string
func (_e *MockDBClient_Expecter) Pop(key interface{}) *MockDBClient_Pop_Call {
	return &MockDBClient_Pop_Call{Call: _e.mock.On("Pop", key)}
}

func (_c *MockDBClient_Pop_Call) Run(run func(key string)) *MockDBClient_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBClient_Pop_Call) Return(item *Item, err error) *MockDBClient_Pop_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockDBClient_Pop_Call) RunAndReturn(run func(key string) (*Item, error)) *MockDBClient_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Push(key string, values []string, opts ...ItemOptions) (*Item, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(key, values, opts)
	} else {
		tmpRet = _mock.Called(key, values)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 *Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string, ...ItemOptions) (*Item, error)); ok {
		return returnFunc(key, values, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string, ...ItemOptions) *Item); ok {
		r0 = returnFunc(key, values, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string, ...ItemOptions) error); ok {
		r1 = returnFunc(key, values, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBClient_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockDBClient_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - key string
//   - values []string
//   - opts ...ItemOptions
func (_e *MockDBClient_Expecter) Push(key interface{}, values interface{}, opts ...interface{}) *MockDBClient_Push_Call {
	return &MockDBClient_Push_Call{Call: _e.mock.On("Push",
		append([]interface{}{key, values}, opts...)...)}
}

func (_c *MockDBClient_Push_Call) Run(run func(key string, values []string, opts ...ItemOptions)) *MockDBClient_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []ItemOptions
		var variadicArgs []ItemOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]ItemOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBClient_Push_Call) Return(item *Item, err error) *MockDBClient_Push_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockDBClient_Push_Call) RunAndReturn(run func(key string, values []string, opts ...ItemOptions) (*Item, error)) *MockDBClient_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Remove(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockDBClient_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - key string
func (_e *MockDBClient_Expecter) Remove(key interface{}) *MockDBClient_Remove_Call {
	return &MockDBClient_Remove_Call{Call: _e.mock.On("Remove", key)}
}

func (_c *MockDBClient_Remove_Call) Run(run func(key string)) *MockDBClient_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBClient_Remove_Call) Return(err error) *MockDBClient_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Remove_Call) RunAndReturn(run func(key string) error) *MockDBClient_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Set(key string, value any, opts ...ItemOptions) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(key, value, opts)
	} else {
		tmpRet = _mock.Called(key, value)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, any, ...ItemOptions) error); ok {
		r0 = returnFunc(key, value, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockDBClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value any
//   - opts ...ItemOptions
func (_e *MockDBClient_Expecter) Set(key interface{}, value interface{}, opts ...interface{}) *MockDBClient_Set_Call {
	return &MockDBClient_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{key, value}, opts...)...)}
}

func (_c *MockDBClient_Set_Call) Run(run func(key string, value any, opts ...ItemOptions)) *MockDBClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []ItemOptions
		var variadicArgs []ItemOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]ItemOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBClient_Set_Call) Return(err error) *MockDBClient_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Set_Call) RunAndReturn(run func(key string, value any, opts ...ItemOptions) error) *MockDBClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockDBClient
func (_mock *MockDBClient) Update(key string, value any, opts ...ItemOptions) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(key, value, opts)
	} else {
		tmpRet = _mock.Called(key, value)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, any, ...ItemOptions) error); ok {
		r0 = returnFunc(key, value, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDBClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key string
//   - value any
//   - opts ...ItemOptions
func (_e *MockDBClient_Expecter) Update(key interface{}, value interface{}, opts ...interface{}) *MockDBClient_Update_Call {
	return &MockDBClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{key, value}, opts...)...)}
}

func (_c *MockDBClient_Update_Call) Run(run func(key string, value any, opts ...ItemOptions)) *MockDBClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []ItemOptions
		var variadicArgs []ItemOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]ItemOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBClient_Update_Call) Return(err error) *MockDBClient_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBClient_Update_Call) RunAndReturn(run func(key string, value any, opts ...ItemOptions) error) *MockDBClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
